/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'distribution'


opensearchplugin {
    name 'opensearch-querqy'
    description 'Query rewriting plugin'
    classname 'querqy.opensearch.QuerqyPlugin'
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

buildscript {

    ext {
        opensearch_version = System.getProperty("opensearch.version", "2.19.2")
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
    }
}

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
    isSnapshot = "true" == System.getProperty("build.snapshot", "true")
}

repositories {
    mavenLocal()
}

allprojects {
    group = "org.opensearch"

    version = "1.1.os" + (opensearch_version - "-SNAPSHOT")

    if (isSnapshot) {
        version += "-SNAPSHOT"
    }

    plugins.withId('java') {
        sourceCompatibility = targetCompatibility = "11"
    }

    tasks.withType(Jar) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

dependencies {
    api('org.querqy:querqy-lucene:5.9.lucene980.0')
    api('com.fasterxml.jackson.core:jackson-databind:2.18.2')
    api('com.fasterxml.jackson.core:jackson-annotations:2.18.2')
    api("org.querqy:querqy-core:3.18.0")
    implementation('com.jayway.jsonpath:json-path:2.9.0')
    implementation("commons-io:commons-io:2.15.1")
    implementation('net.minidev:json-smart:2.5.2')
    implementation("net.minidev:accessors-smart:2.4.8")
    implementation("org.ow2.asm:asm:9.3")
    implementation("org.slf4j:slf4j-api:2.0.1")


    testImplementation('junit:junit:4.13.2')
    testImplementation('org.mockito:mockito-core:5.14.2')
    testImplementation('org.apache.logging.log4j:log4j-core:2.21.0')
    testImplementation('org.assertj:assertj-core:3.23.1')
}

test {
    useJUnit()
    finalizedBy jacocoTestReport
    include "**/*Test.class"
    systemProperties 'java.security.policy': file("$projectDir/plugin-security.policy").absolutePath
}

jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

configurations.all {
    resolutionStrategy.force 'junit:junit:4.13.2'
    resolutionStrategy.force'com.fasterxml.jackson.core:jackson-databind:2.13.3'
}

licenseHeaders.enabled = true

// no need to validate pom, as we do not upload to maven/sonatype
validateNebulaPom.enabled = false
generatePomFileForNebulaPublication.enabled = false
generateMetadataFileForNebulaPublication.enabled = false
publishNebulaPublicationToMavenLocal.enabled = false
// TODO: find better way to exclude publishNebulaPublicationToSonatypeRepository
tasks.whenTaskAdded {task ->
    if(task.name.contains("publishNebulaPublicationToSonatypeRepository")) {
        task.enabled = false
    }
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:-missing', '-quiet')
}

dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false
// Allow @Test to be used in test classes not inherited from LuceneTestCase.
// see https://github.com/elastic/elasticsearch/blob/26c3dd6857d047054b2108f85bc2b040a9c81fe4/build-tools-internal/src/main/resources/forbidden/es-test-signatures.txt
forbiddenApis.ignoreFailures = true
// Allow test cases to be named Tests without having to be inherited from LuceneTestCase.
// see https://github.com/elastic/elasticsearch/blob/323f312bbc829a63056a79ebe45adced5099f6e6/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/TestingConventionsTasks.java
testingConventions.enabled = false
loggerUsageCheck.enabled = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact distZip

            groupId = 'org.querqy'
            artifactId = 'opensearch-querqy'
            version = "$version"

            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Querqy Opensearch'
                description = 'This is the Opensearch plugin version of Querqy - a query preprocessing framework for Java-based search engines.'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jope'
                        name = 'Johannes Peter'
                        email = 'johannesdaniel.peter@gmx.de'
                        url = 'https://github.com/querqy/querqy-opensearch'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            //def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            //def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'

            name = 'sonatype'
            url = 'https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/' //version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
